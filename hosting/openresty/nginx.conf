# nginx.conf Version: 2.0.0 - 2025-08-03 - SSL handler with ssl_enabled
# Run as root to access SSL certificates
user root;
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;
    
    # DNS resolver for container names
    resolver 127.0.0.11 valid=30s;
    
    # Include SSL certificate mappings (if exists)
    include /data/nginx/ssl_mappings.conf*;
    

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100m;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Lua settings
    lua_package_path "/etc/openresty/lua/?.lua;;";
    
    # Shared memory zones for caching
    lua_shared_dict routes_cache 50m;
    lua_shared_dict metrics 10m;
    lua_shared_dict request_data 10m;

    # SSL certificate cache
    lua_shared_dict ssl_certs 10m;
    
    # Initialize Redis connection settings
    init_by_lua_block {
        -- Load required modules
        require "resty.core"
        
        -- Redis configuration for router
        redis_host = os.getenv("REDIS_HOST") or "keydb"
        redis_port = tonumber(os.getenv("REDIS_PORT") or 16378)
        redis_password = os.getenv("REDIS_PASSWORD") or nil
        redis_db = tonumber(os.getenv("REDIS_DB") or 1)
    }

    # Health check endpoint
    server {
        listen 8081;
        location /health {
            access_log off;
            return 200 "OK\n";
        }
    }


    # Main server block (HTTP)
    server {
        listen 80 default_server;
        server_name _;
        
        # Handle ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Variables for routing
        set $target_root '';
        set $route_type '';
        set $proxy_target '';
        set $request_domain '';
        set $ssl_redirect '';
        set $preserve_host '';
        
        
        # Static file handling
        location @static {
            internal;
            root $target_root;
            try_files $uri $uri/ /index.html =404;
            
            # Log static file requests
            log_by_lua_block {
                local ok, logger = pcall(require, "logger")
                if not ok then
                    ngx.log(ngx.ERR, "Failed to load logger module: ", logger)
                    return
                end
                
                local domain = ngx.var.request_domain
                if domain and domain ~= "" then
                    ngx.log(ngx.INFO, "Logging static request for domain: ", domain, " status: ", ngx.var.status, " bytes: ", ngx.var.bytes_sent)
                    local request_data = {
                        domain = domain,
                        method = ngx.var.request_method,
                        uri = ngx.var.uri,
                        status = ngx.var.status,
                        bytes = tonumber(ngx.var.bytes_sent) or tonumber(ngx.var.body_bytes_sent) or 0,
                        request_time = tonumber(ngx.var.request_time) or 0,
                        remote_addr = ngx.var.remote_addr,
                        user_agent = ngx.var.http_user_agent,
                        referer = ngx.var.http_referer
                    }
                    
                    local ok, err = pcall(logger.log_request, request_data)
                    if not ok then
                        ngx.log(ngx.ERR, "Failed to log request: ", err)
                    end
                end
            }
        }
        
        # Proxy handling
        location @proxy {
            internal;
            
            # DNS resolver for dynamic proxy targets
            resolver 8.8.8.8 8.8.4.4 valid=300s;
            resolver_timeout 10s;
            
            # Proxy settings
            proxy_pass $proxy_target;
            proxy_http_version 1.1;
            
            # Rewrite redirects to remove port 8443 and fix protocol
            proxy_redirect ~^(https?://[^/]+):8443(.*)$ $1$2;
            proxy_redirect ~^http://(.*)$ https://$1;
            
            # Headers
            # Extract hostname from proxy target URL for Host header
            set $proxy_host '';
            access_by_lua_block {
                local target = ngx.var.proxy_target
                if target then
                    local host = target:match("https?://([^/]+)")
                    if host then
                        ngx.var.proxy_host = host
                        ngx.log(ngx.INFO, "Proxy: Extracted proxy_host: ", host, " from target: ", target)
                    else
                        ngx.log(ngx.ERR, "Proxy: Could not extract host from target: ", target)
                    end
                else
                    ngx.log(ngx.ERR, "Proxy: No proxy_target set")
                end
                
                -- Always use the extracted proxy host
                ngx.log(ngx.INFO, "Proxy: Using extracted host: ", ngx.var.proxy_host)
            }
            
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # SSL/SNI settings for HTTPS backends
            proxy_ssl_server_name on;
            proxy_ssl_name $proxy_host;
            
            # Handle backend responses
            proxy_intercept_errors off;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Disable buffering for SSE/streaming
            proxy_buffering off;
            proxy_cache off;
            
            # Log proxy requests
            log_by_lua_block {
                local ok, logger = pcall(require, "logger")
                if not ok then
                    ngx.log(ngx.ERR, "Failed to load logger module: ", logger)
                    return
                end
                
                local domain = ngx.var.request_domain
                if domain and domain ~= "" then
                    ngx.log(ngx.INFO, "Logging proxy request for domain: ", domain, " status: ", ngx.var.status)
                    local request_data = {
                        domain = domain,
                        method = ngx.var.request_method,
                        uri = ngx.var.uri,
                        status = ngx.var.status,
                        bytes = tonumber(ngx.var.bytes_sent) or tonumber(ngx.var.body_bytes_sent) or 0,
                        request_time = tonumber(ngx.var.request_time) or 0,
                        remote_addr = ngx.var.remote_addr,
                        user_agent = ngx.var.http_user_agent,
                        referer = ngx.var.http_referer
                    }
                    
                    local ok, err = pcall(logger.log_request, request_data)
                    if not ok then
                        ngx.log(ngx.ERR, "Failed to log request: ", err)
                    end
                end
            }
        }
        
        # Main routing logic
        location / {
            # Use Lua to determine routing
            access_by_lua_file /etc/openresty/lua/router.lua;
            
            
            # Route based on type
            content_by_lua_block {
                local route_type = ngx.var.route_type
                
                if route_type == "static" then
                    -- Serve static files
                    return ngx.exec("@static")
                elseif route_type == "proxy" or route_type == "loadbalancer" then
                    -- Proxy to target (loadbalancer sets proxy_target in router.lua)
                    return ngx.exec("@proxy")
                else
                    ngx.status = 404
                    ngx.say("Site not found")
                end
            }
        }
        
        # Error pages
        error_page 404 /errors/404.html;
        error_page 500 /errors/500.html;
        error_page 502 /errors/502.html;
        error_page 503 /errors/503.html;
        
        location ~ ^/errors/(404|500|502|503)\.html$ {
            internal;
            root /var/www/static;
        }
    }

    # Default SSL server block using auto-ssl
    server {
        listen 443 ssl;
        server_name _;
        
        # Dynamic SSL certificate loading
        ssl_certificate_by_lua_file /etc/openresty/lua/ssl_handler.lua;
        
        # Fallback certificate for non-SNI clients
        ssl_certificate /etc/letsencrypt/live/default/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/default/privkey.pem;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Variables for routing
        set $target_root '';
        set $route_type '';
        set $proxy_target '';
        set $request_domain '';
        set $preserve_host '';
        
        # All other locations are the same as HTTP block
        location @static {
            internal;
            root $target_root;
            try_files $uri $uri/ /index.html =404;
            
            log_by_lua_block {
                local ok, logger = pcall(require, "logger")
                if not ok then
                    ngx.log(ngx.ERR, "Failed to load logger module: ", logger)
                    return
                end
                local ok, err = pcall(logger.log_request)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to log request: ", err)
                end
            }
        }
        
        location @proxy {
            internal;
            
            # DNS resolver for dynamic proxy targets
            resolver 8.8.8.8 8.8.4.4 valid=300s;
            resolver_timeout 10s;
            
            # Use a variable to make proxy_pass dynamic
            set $proxy_host '';
            access_by_lua_block {
                local target = ngx.var.proxy_target
                if target then
                    local host = target:match("https?://([^/]+)")
                    if host then
                        ngx.var.proxy_host = host
                        ngx.log(ngx.INFO, "Proxy: Extracted proxy_host: ", host, " from target: ", target)
                    else
                        ngx.log(ngx.ERR, "Proxy: Could not extract host from target: ", target)
                    end
                else
                    ngx.log(ngx.ERR, "Proxy: No proxy_target set")
                end
                
                -- Always use the extracted proxy host
                ngx.log(ngx.INFO, "Proxy: Using extracted host: ", ngx.var.proxy_host)
            }
            
            proxy_pass $proxy_target;
            proxy_http_version 1.1;
            
            # Rewrite redirects to remove port 8443 and fix protocol
            proxy_redirect ~^(https?://[^/]+):8443(.*)$ $1$2;
            proxy_redirect ~^http://(.*)$ https://$1;
            
            # Headers
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Log proxy requests
            log_by_lua_block {
                local logger = require "logger"
                logger.log_request()
            }
        }
        
        location / {
            access_by_lua_file /etc/openresty/lua/router.lua;
            
            content_by_lua_block {
                local route_type = ngx.var.route_type
                
                if route_type == "static" then
                    return ngx.exec("@static")
                elseif route_type == "proxy" or route_type == "loadbalancer" then
                    return ngx.exec("@proxy")
                else
                    ngx.status = 404
                    ngx.say("Site not found")
                end
            }
        }
        
        error_page 404 /errors/404.html;
        error_page 500 /errors/500.html;
        error_page 502 /errors/502.html;
        error_page 503 /errors/503.html;
        
        location ~ ^/errors/(404|500|502|503)\.html$ {
            internal;
            root /var/www/static;
        }
    }
}