# SpinForge HAProxy Load Balancer Configuration
# Copyright (c) 2025 Jacob Ajiboye
# Licensed under the MIT License

global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    # Enable stats
    stats enable
    stats uri /haproxy-stats
    stats refresh 30s
    stats hide-version
    stats realm HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD:-admin123}

# Frontend for HTTP traffic
frontend http_frontend
    bind *:80
    
    # Redirect HTTP to HTTPS for production
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/spinforge.pem
    
    # ACLs for routing
    acl is_api hdr_beg(host) -i api.
    acl is_admin hdr_beg(host) -i admin.
    acl is_grafana hdr_beg(host) -i grafana.
    acl is_prometheus hdr_beg(host) -i prometheus.
    
    # Health check endpoint
    acl is_health_check path_beg /health
    
    # Route to appropriate backends
    use_backend spinforge-api if is_api
    use_backend spinforge-admin-ui if is_admin
    use_backend grafana if is_grafana
    use_backend prometheus if is_prometheus
    use_backend spinforge-health if is_health_check
    
    # Default backend for customer applications
    default_backend spinforge-customer-apps

# Backend for SpinForge API
backend spinforge-api
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Add your Swarm nodes here - update with actual IPs
    server node1 NODE1_IP:8080 check inter 10s fall 3 rise 2
    server node2 NODE2_IP:8080 check inter 10s fall 3 rise 2
    server node3 NODE3_IP:8080 check inter 10s fall 3 rise 2
    server node4 NODE4_IP:8080 check inter 10s fall 3 rise 2

# Backend for customer applications (OpenResty)
backend spinforge-customer-apps
    balance roundrobin
    option httpchk GET /health
    
    # Customer traffic goes to OpenResty on all nodes
    server node1 NODE1_IP:80 check inter 10s fall 3 rise 2
    server node2 NODE2_IP:80 check inter 10s fall 3 rise 2
    server node3 NODE3_IP:80 check inter 10s fall 3 rise 2
    server node4 NODE4_IP:80 check inter 10s fall 3 rise 2

# Backend for Admin UI
backend spinforge-admin-ui
    balance roundrobin
    option httpchk GET /
    
    server node1 NODE1_IP:8083 check inter 10s fall 3 rise 2
    server node2 NODE2_IP:8083 check inter 10s fall 3 rise 2
    server node3 NODE3_IP:8083 check inter 10s fall 3 rise 2
    server node4 NODE4_IP:8083 check inter 10s fall 3 rise 2

# Backend for Grafana monitoring
backend grafana
    balance roundrobin
    option httpchk GET /api/health
    
    server node1 NODE1_IP:3000 check inter 10s fall 3 rise 2
    server node2 NODE2_IP:3000 check inter 10s fall 3 rise 2 backup
    server node3 NODE3_IP:3000 check inter 10s fall 3 rise 2 backup

# Backend for Prometheus metrics
backend prometheus
    balance roundrobin
    option httpchk GET /-/healthy
    
    server node1 NODE1_IP:9090 check inter 10s fall 3 rise 2

# Backend for health checks
backend spinforge-health
    balance roundrobin
    http-request return status 200 content-type text/plain string "HAProxy OK"

# Statistics backend
listen stats
    bind *:8404
    stats enable
    stats uri /
    stats refresh 5s
    stats admin if TRUE
    stats auth admin:${HAPROXY_STATS_PASSWORD:-admin123}
