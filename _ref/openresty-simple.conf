user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100m;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Lua settings
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict routes_cache 50m;
    lua_shared_dict spinlets_cache 50m;
    lua_shared_dict metrics 10m;

    # SpinHub for management APIs
    upstream spinhub {
        server spinhub:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    server {
        listen 80 default_server;
        server_name _;
        
        # Variables for Lua
        set $target '';
        set $static_root '';
        set $framework '';

        # Health check endpoint
        location = /_health {
            access_log off;
            content_by_lua_block {
                ngx.header["Content-Type"] = "application/json"
                ngx.say('{"status":"healthy","service":"gateway"}')
            }
        }

        # Management APIs - proxy to SpinHub
        location ~ ^/(_admin|_auth|_api|_metrics) {
            proxy_pass http://spinhub;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main application routing
        location / {
            # Run the Lua router
            access_by_lua_file /etc/nginx/lua/flexible_router.lua;
            
            # If static content
            if ($framework = "hosted") {
                root $static_root;
                try_files $uri $uri/ /index.html;
            }
            
            # If proxy to Node.js app
            if ($framework = "proxy") {
                proxy_pass $target;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 300s;
                proxy_connect_timeout 75s;
            }
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            root /usr/share/nginx/html;
        }
        
        location = /50x.html {
            internal;
            root /usr/share/nginx/html;
        }
    }
}