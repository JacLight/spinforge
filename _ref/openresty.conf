# user nginx; # Commented out - OpenResty runs as root in Alpine
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100m;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Lua package path
    lua_package_path "/usr/local/openresty/luajit/share/lua/?.lua;;";
    lua_package_cpath "/usr/local/openresty/luajit/lib/lua/?.so;;";

    # Shared memory zones for caching
    lua_shared_dict routes_cache 50m;
    lua_shared_dict spinlets_cache 50m;
    lua_shared_dict metrics 10m;

    # Redis connection pool
    upstream redis_pool {
        server keydb:16378;
        keepalive 100;
    }

    # SpinHub for management APIs only
    upstream spinhub {
        server spinhub:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Initialize Redis connection
    init_worker_by_lua_block {
        local redis = require "resty.redis"
        local red = redis:new()
        red:set_timeout(1000) -- 1 second timeout
    }

    server {
        listen 80 default_server;
        server_name _;
        
        # Security
        server_tokens off;

        # Static file serving for framework=static
        location @serve_static {
            internal;
            root $static_root;
            try_files $uri $uri/ /index.html;
            
            # Security headers for static files
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
        }

        # Node.js/Express proxy
        location @proxy_to_node {
            internal;
            proxy_pass http://localhost:$spinlet_port;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Management APIs - still handled by SpinHub
        location ~ ^/(_admin|_auth|_api|_health|_metrics) {
            proxy_pass http://spinhub;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main routing logic using Lua
        location / {
            set $static_root '';
            set $spinlet_port '';
            set $framework '';
            
            access_by_lua_file /etc/nginx/lua/flexible_router.lua;
            
            # Route based on framework type
            if ($framework = "static") {
                rewrite ^/(.*)$ /$1 break;
                echo_exec @serve_static;
            }
            
            if ($framework != "static") {
                echo_exec @proxy_to_node;
            }
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            content_by_lua_block {
                ngx.header["Content-Type"] = "text/html"
                ngx.say([[
                    <!DOCTYPE html>
                    <html>
                    <head><title>404 Not Found</title></head>
                    <body>
                        <h1>404 - Application Not Found</h1>
                        <p>The requested application does not exist or is not deployed.</p>
                    </body>
                    </html>
                ]])
            }
        }
        
        location = /50x.html {
            internal;
            content_by_lua_block {
                ngx.header["Content-Type"] = "text/html"
                ngx.say([[
                    <!DOCTYPE html>
                    <html>
                    <head><title>Error</title></head>
                    <body>
                        <h1>Application Error</h1>
                        <p>The application encountered an error. Please try again later.</p>
                    </body>
                    </html>
                ]])
            }
        }
    }
}